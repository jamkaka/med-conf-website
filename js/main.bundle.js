!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";n.r(t);var o=function(e,t,n,o){return(e/=o/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t},r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){var e=void 0,t=void 0,n=void 0,i=void 0,u=void 0,c=void 0,s=void 0,l=void 0,a=void 0,d=void 0,f=void 0,m=void 0;function v(e){return e.getBoundingClientRect().top+t}function p(n){a||(a=n),f=u(d=n-a,t,s,l),window.scrollTo(0,f),d<l?window.requestAnimationFrame(p):(window.scrollTo(0,t+s),e&&c&&(e.setAttribute("tabindex","-1"),e.focus()),"function"==typeof m&&m(),a=!1)}return function(a){var d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};switch(l=d.duration||1e3,i=d.offset||0,m=d.callback,u=d.easing||o,c=d.a11y||!1,t=window.scrollY||window.pageYOffset,void 0===a?"undefined":r(a)){case"number":e=void 0,c=!1,n=t+a;break;case"object":n=v(e=a);break;case"string":e=document.querySelector(a),n=v(e)}switch(s=n-t+i,r(d.duration)){case"number":l=d.duration;break;case"function":l=d.duration(s)}window.requestAnimationFrame(p)}}();function u(e){const t=e.currentTarget.dataset.target;i(`.section-${t}`)}document.querySelectorAll(".js-link").forEach(e=>e.addEventListener("click",u));let c=$("#lecture-1");const s=$(".lecture-single");$(".lecture-list").on("click",function(e){if($(e.target).hasClass("lecture-single")){const t=$(`#lecture-${e.target.id}`);if(c.is(":animated"))return;t.is(c)||(s.each((e,t)=>$(t).removeClass("is-lecture-selected")),c.removeClass("is-lecture-selected"),$(e.target).addClass("is-lecture-selected"),c.fadeOut("slow",function(){t.fadeIn("slow").css({display:"flex"}),c=t}))}}),particlesJS.load("particles-js","js/particles.json"),$(".menu-hamburger").on("click",function(){$(".overlay").fadeIn(300),$(".menu-hamburger").addClass("is-menu-hamburger-clicked"),$(".responsive-menu").addClass("is-responsive-menu-toggled")}),$(".overlay, .js-link").on("click",function(){$(".overlay").fadeOut(300),$(".menu-hamburger").removeClass("is-menu-hamburger-clicked"),$(".responsive-menu").removeClass("is-responsive-menu-toggled")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,