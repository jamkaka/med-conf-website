!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){e.exports=n(1)},function(e,t,n){"use strict";n.r(t);var o=function(e,t,n,o){return(e/=o/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t},r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},i=function(){var e=void 0,t=void 0,n=void 0,i=void 0,u=void 0,c=void 0,s=void 0,a=void 0,l=void 0,d=void 0,f=void 0,m=void 0;function v(e){return e.getBoundingClientRect().top+t}function p(n){l||(l=n),f=u(d=n-l,t,s,a),window.scrollTo(0,f),d<a?window.requestAnimationFrame(p):(window.scrollTo(0,t+s),e&&c&&(e.setAttribute("tabindex","-1"),e.focus()),"function"==typeof m&&m(),l=!1)}return function(l){var d=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};switch(a=d.duration||1e3,i=d.offset||0,m=d.callback,u=d.easing||o,c=d.a11y||!1,t=window.scrollY||window.pageYOffset,void 0===l?"undefined":r(l)){case"number":e=void 0,c=!1,n=t+l;break;case"object":n=v(e=l);break;case"string":e=document.querySelector(l),n=v(e)}switch(s=n-t+i,r(d.duration)){case"number":a=d.duration;break;case"function":a=d.duration(s)}window.requestAnimationFrame(p)}}();function u(e){const t=e.currentTarget.dataset.target;i(`.section-${t}`)}document.querySelectorAll(".js-link").forEach(e=>e.addEventListener("click",u));let c=$("#lecture-1");const s=$(".lecture-single");function a(e){const t=$(`#lecture-${e.target.id}`);c.is(":animated")||t.is(c)||(s.each((e,t)=>$(t).removeClass("is-lecture-selected")),$(e.target).addClass("is-lecture-selected"),c.fadeOut("slow",()=>{t.fadeIn("slow").css({display:"flex"}),c=t}))}s.each((e,t)=>$(t).on("click",a)),particlesJS.load("particles-js","js/particles.json"),$(".menu-hamburger").on("click",function(){$(".overlay").fadeIn(300),$(".menu-hamburger").addClass("is-menu-hamburger-clicked"),$(".responsive-menu").addClass("is-responsive-menu-toggled")}),$(".overlay, .js-link").on("click",function(){$(".overlay").fadeOut(300),$(".menu-hamburger").removeClass("is-menu-hamburger-clicked"),$(".responsive-menu").removeClass("is-responsive-menu-toggled")})}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,